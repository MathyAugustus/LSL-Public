Spezifikation der Variablennamen

In diesem Text werden wir eine Spezifikation der Variablennamen f√ºr LSL (Linden Script Language) behandeln, die verwendet wird, um Verhalten an Objekte anzuh√§ngen.

Zun√§chst m√ºssen wir √ºber die Typen von Variablen sprechen, die sind: integer, float, string, key, list, vector und rotation.

Diese Typen werden in LSL zur Wertzuweisung verwendet. Um Fehler durch "type mismatch" (Typeninkonsistenz) zu vermeiden, w√§re es sinnvoll, den Typ im Namen der Variablen einzuschlie√üen. Eine weitere empfehlenswerte Praxis bei der Benennung von Variablen ist die Verwendung von "Camel Case", bei der der erste Buchstabe des Namens klein ist, aber die nachfolgenden Namen, die in der Variablen enthalten sind, mit einem Gro√übuchstaben beginnen. Wir veranschaulichen dies mit einem "hello avatar" Code, der, wenn er ber√ºhrt wird, den Namen der Person aussagt, die ihn ber√ºhrt hat:

lsl

default
{
	state_entry()
	{
		llSay(0, "Hallo, Avatar!");
	}

	touch_start(integer total_num)
	{
		llSay(0, "Ber√ºhrt!");
		key chave = llDetectedKey(0);
		llSay(0, "Ich wurde von " + llKey2Name(chave) + " ber√ºhrt");
		// In der obigen Zeile h√§tte ich llDetectedName(0) verwenden k√∂nnen, aber aus didaktischen Gr√ºnden habe ich llDetectedKey(0) verwendet.
	}
}

Dieser Code, unter der Annahme, dass der Typ zum Namen geh√∂rt, w√§re:

lsl

default
{
	state_entry()
	{
		llSay(0, "Hallo, Avatar!");
	}

	touch_start(integer total_num)
	{
		llSay(0, "Ber√ºhrt!");
		key keyChave = llDetectedKey(0);
		llSay(0, "Ich wurde von " + llKey2Name(keyChave) + " ber√ºhrt");
		// In der obigen Zeile h√§tte ich llDetectedName(0) verwenden k√∂nnen, aber aus didaktischen Gr√ºnden habe ich llDetectedKey(0) verwendet.
	}
}

Ein weiterer wichtiger Punkt ist der Geltungsbereich, der global oder privat sein kann. Globale Variablen werden am Anfang des Codes deklariert, w√§hrend private Variablen nur innerhalb des Codeblocks sichtbar sind, in dem sie deklariert wurden. Zu Organisationszwecken beginnen globale Variablen mit dem Kleinbuchstaben "g" und private mit "p". Sehen wir, wie unser Beispiel aussehen w√ºrde:

lsl

default
{
	state_entry()
	{
		llSay(0, "Hallo, Avatar!");
	}

	touch_start(integer total_num)
	{
		llSay(0, "Ber√ºhrt!");
		key pKeyChave = llDetectedKey(0);
		llSay(0, "Ich wurde von " + llKey2Name(pKeyChave) + " ber√ºhrt");
		// Beachten Sie, dass pKeyChave nur w√§hrend der Ausf√ºhrung des touch_start-Ereignisblocks existiert. Nach dem Ende des Blocks existiert sie nicht mehr. Wenn es notwendig ist, den Wert in anderen Bl√∂cken zu verwenden, sollte pKeyChave am Anfang deklariert werden, und ihr Wert verbraucht Speicher, solange das Skript l√§uft.
	}
}

Es gibt auch einen weiteren Fall f√ºr private Variablen, die Bl√∂cke innerhalb von Bl√∂cken sind. In diesen F√§llen verwenden wir "pp", wie im folgenden Beispiel:

lsl

key gKeyChave;	

default
{
	state_entry()
	{
		llSay(0, "Hallo, Avatar!");
	}

	touch_start(integer total_num)
	{
		llSay(0, "Ber√ºhrt!");
		gKeyChave = llDetectedKey(0);
		
		integer pIntegerID;
		for(pIntegerID = 0; pIntegerID < total_num; pIntegerID++)
		{
			integer ppIntegerForID = pIntegerID;
			llSay(0, "Ich wurde von " + llKey2Name(gKeyChave) + " ber√ºhrt und er hat die ID = " + (string)ppIntegerForID);
			// Wenn ppIntegerForID au√üerhalb des Blocks verwendet wird, tritt ein Fehler auf, da es in diesem Teil des Codes nicht mehr existiert.
		}
	}
}

Die letzte √úberlegung bez√ºglich der Benennung von Variablen bezieht sich auf Parameter, die durch Ereignisausl√∂sungen in den Code √ºbergeben werden. Diese Variablen erhalten den Buchstaben "e", wenn sie in Ereignissen deklariert werden.

lsl

key gKeyChave;	

default
{
	state_entry()
	{
		llSay(0, "Hallo, Avatar!");
	}

	touch_start(integer eIntegerTotal)
	{
		llSay(0, "Ber√ºhrt!");
		gKeyChave = llDetectedKey(0);
		
		integer pIntegerID;
		for(pIntegerID = 0; pIntegerID < eIntegerTotal; pIntegerID++)
		{
			integer ppIntegerForID = pIntegerID;
			llSay(0, "Ich wurde von " + llKey2Name(gKeyChave) + " ber√ºhrt und er hat die ID = " + (string)ppIntegerForID);
		}
		
		// "e" Variablen existieren nur w√§hrend der Ausf√ºhrung des Ereignisses.
	}
}

Dies sind die Regeln, die ich bei der Spezifikation von Variablennamen verwende. Nat√ºrlich gibt es andere √úberlegungen, die hier nicht enthalten sind, wie die Verwendung von nur 3 Buchstaben beim Deklarieren des Typs (z.B. eIntTotal). Es wird immer empfohlen, Variablen auf Englisch zu benennen... es ist stilvoller! üòÑ

Dies ist eine Zusammenfassung meiner Spezifikation f√ºr Variablennamen. Sobald sie mit weiteren Informationen aktualisiert wird, wird sie ver√∂ffentlicht.

Mit freundlichen Gr√º√üen,
Augustus
