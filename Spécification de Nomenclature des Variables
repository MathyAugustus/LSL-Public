Sp√©cification de Nomenclature des Variables

Dans ce texte, nous aborderons une sp√©cification de nomenclature des variables pour LSL (Linden Script Language), utilis√©e pour attacher des comportements aux objets.

Pour commencer, nous devons parler des types de variables, qui sont : integer, float, string, key, list, vector et rotation.

Ces types sont utilis√©s dans l'attribution des valeurs en LSL. Pour √©viter les erreurs de "type mismatch" (incompatibilit√© de type), il serait int√©ressant d'inclure le type dans le nom de la variable. Une autre pratique recommand√©e dans la nomenclature des variables est l'utilisation du "camel case", o√π la premi√®re lettre du nom est en minuscule, mais les noms suivants contenus dans la variable commencent par une majuscule. Illustrons avec un code "hello avatar" qui, lorsqu'il est touch√©, dit le nom de la personne qui l'a touch√© :

lsl

default
{
	state_entry()
	{
		llSay(0, "Bonjour, avatar !");
	}

	touch_start(integer total_num)
	{
		llSay(0, "Touch√© !");
		key chave = llDetectedKey(0);
		llSay(0, "J'ai √©t√© touch√© par " + llKey2Name(chave));
		// Dans la ligne ci-dessus, j'aurais pu utiliser llDetectedName(0), mais pour des raisons didactiques, j'ai utilis√© llDetectedKey(0).
	}
}

Ce code, consid√©rant que le type appartient au nom, serait :

lsl

default
{
	state_entry()
	{
		llSay(0, "Bonjour, avatar !");
	}

	touch_start(integer total_num)
	{
		llSay(0, "Touch√© !");
		key keyChave = llDetectedKey(0);
		llSay(0, "J'ai √©t√© touch√© par " + llKey2Name(keyChave));
		// Dans la ligne ci-dessus, j'aurais pu utiliser llDetectedName(0), mais pour des raisons didactiques, j'ai utilis√© llDetectedKey(0).
	}
}

Un autre point important est la port√©e, qui peut √™tre globale ou priv√©e. Les variables globales sont d√©clar√©es en haut du code, tandis que les priv√©es sont visibles uniquement par le bloc de code dans lequel elles ont √©t√© d√©clar√©es. Pour des raisons d'organisation, les variables globales commencent par la lettre minuscule "g" et les priv√©es par "p". Voyons √† quoi ressemblerait notre exemple :

lsl

default
{
	state_entry()
	{
		llSay(0, "Bonjour, avatar !");
	}

	touch_start(integer total_num)
	{
		llSay(0, "Touch√© !");
		key pKeyChave = llDetectedKey(0);
		llSay(0, "J'ai √©t√© touch√© par " + llKey2Name(pKeyChave));
		// Notez que, pour des effets de port√©e, pKeyChave existe uniquement pendant l'ex√©cution du bloc d'√©v√©nement touch_start. Apr√®s la fin du bloc, elle cesse d'exister. Si il est n√©cessaire d'utiliser la valeur dans d'autres blocs, pKeyChave devrait √™tre d√©clar√©e en haut, et sa valeur consomme de la m√©moire tant que le script est en cours d'ex√©cution.
	}
}

Il existe √©galement un autre cas pour les variables priv√©es, qui seraient des blocs dans des blocs. Dans ces cas, nous utilisons "pp", comme dans l'exemple suivant :

lsl

key gKeyChave;	

default
{
	state_entry()
	{
		llSay(0, "Bonjour, avatar !");
	}

	touch_start(integer total_num)
	{
		llSay(0, "Touch√© !");
		gKeyChave = llDetectedKey(0);
		
		integer pIntegerID;
		for(pIntegerID = 0; pIntegerID < total_num; pIntegerID++)
		{
			integer ppIntegerForID = pIntegerID;
			llSay(0, "J'ai √©t√© touch√© par " + llKey2Name(gKeyChave) + " et il a l'ID = " + (string)ppIntegerForID);
			// Si ppIntegerForID est utilis√© en dehors du bloc, une erreur se produira, car il n'existe plus dans cette partie du code.
		}
	}
}

La derni√®re consid√©ration concernant la nomenclature des variables se r√©f√®re aux param√®tres pass√©s dans le code par d√©clenchement d'√©v√©nements. Ces variables re√ßoivent la lettre "e" lorsqu'elles sont d√©clar√©es dans des √©v√©nements.

lsl

key gKeyChave;	

default
{
	state_entry()
	{
		llSay(0, "Bonjour, avatar !");
	}

	touch_start(integer eIntegerTotal)
	{
		llSay(0, "Touch√© !");
		gKeyChave = llDetectedKey(0);
		
		integer pIntegerID;
		for(pIntegerID = 0; pIntegerID < eIntegerTotal; pIntegerID++)
		{
			integer ppIntegerForID = pIntegerID;
			llSay(0, "J'ai √©t√© touch√© par " + llKey2Name(gKeyChave) + " et il a l'ID = " + (string)ppIntegerForID);
		}
		
		// Les variables "e" existent uniquement pendant l'ex√©cution de l'√©v√©nement.
	}
}

Ce sont les r√®gles que j'utilise dans la sp√©cification de nomenclature des variables. Bien s√ªr, il y a d'autres consid√©rations qui ne sont pas incluses ici, comme utiliser seulement 3 lettres lors de la d√©claration du type (ex. : eIntTotal). Il est toujours recommand√© de nommer les variables en anglais... c'est plus styl√© ! üòÑ

Ceci est un r√©sum√© de ma sp√©cification de nomenclature des variables. Au fur et √† mesure qu'elle sera mise √† jour avec plus d'informations, elle sera publi√©e.

Cordialement,
Augustus
