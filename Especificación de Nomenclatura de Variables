Especificaci√≥n de Nomenclatura de Variables

En este texto, abordaremos una especificaci√≥n de nomenclatura de variables para LSL (Linden Script Language), utilizada para adjuntar comportamiento a objetos.

Primero, necesitamos hablar sobre los tipos de variables, que son: integer, float, string, key, list, vector y rotation.

Estos tipos se utilizan en la asignaci√≥n de valores en LSL. Para evitar errores de "type mismatch" (incompatibilidad de tipo), ser√≠a interesante incluir el tipo en el nombre de la variable. Otra pr√°ctica recomendada en la nomenclatura de variables es el uso de "camel case", donde la primera letra del nombre es min√∫scula, pero los nombres subsiguientes contenidos en la variable comienzan con una letra may√∫scula. Vamos a ejemplificar con un c√≥digo "hello avatar" que, al ser tocado, dice el nombre de la persona que lo toc√≥:

lsl

default
{
	state_entry()
	{
		llSay(0, "¬°Hola, avatar!");
	}

	touch_start(integer total_num)
	{
		llSay(0, "¬°Tocado!");
		key chave = llDetectedKey(0);
		llSay(0, "Fui tocado por " + llKey2Name(chave));
		// En la l√≠nea anterior, podr√≠a haber utilizado llDetectedName(0), pero por razones did√°cticas, us√© llDetectedKey(0).
	}
}

Este c√≥digo, considerando que el tipo pertenece al nombre, ser√≠a:

lsl

default
{
	state_entry()
	{
		llSay(0, "¬°Hola, avatar!");
	}

	touch_start(integer total_num)
	{
		llSay(0, "¬°Tocado!");
		key keyChave = llDetectedKey(0);
		llSay(0, "Fui tocado por " + llKey2Name(keyChave));
		// En la l√≠nea anterior, podr√≠a haber utilizado llDetectedName(0), pero por razones did√°cticas, us√© llDetectedKey(0).
	}
}

Otro punto importante es el alcance, que puede ser global o privado. Las variables globales se declaran en la parte superior del c√≥digo, mientras que las privadas solo son visibles por el bloque de c√≥digo en el que fueron declaradas. Para fines organizativos, las variables globales comienzan con la letra min√∫scula "g" y las privadas, con "p". Veamos c√≥mo quedar√≠a nuestro ejemplo:

lsl

default
{
	state_entry()
	{
		llSay(0, "¬°Hola, avatar!");
	}

	touch_start(integer total_num)
	{
		llSay(0, "¬°Tocado!");
		key pKeyChave = llDetectedKey(0);
		llSay(0, "Fui tocado por " + llKey2Name(pKeyChave));
		// Observa que, para efectos de alcance, pKeyChave existe solo durante la ejecuci√≥n del bloque del evento touch_start. Despu√©s de que el bloque termina, deja de existir. Si es necesario usar el valor en otros bloques, pKeyChave deber√≠a ser declarada en la parte superior, y su valor consume memoria mientras el script est√© en ejecuci√≥n.
	}
}

Tambi√©n existe otro caso para variables privadas, que ser√≠an bloques dentro de bloques. En estos casos, usamos "pp", como en el siguiente ejemplo:

lsl

key gKeyChave;	

default
{
	state_entry()
	{
		llSay(0, "¬°Hola, avatar!");
	}

	touch_start(integer total_num)
	{
		llSay(0, "¬°Tocado!");
		gKeyChave = llDetectedKey(0);
		
		integer pIntegerID;
		for(pIntegerID = 0; pIntegerID < total_num; pIntegerID++)
		{
			integer ppIntegerForID = pIntegerID;
			llSay(0, "Fui tocado por " + llKey2Name(gKeyChave) + " y tiene ID = " + (string)ppIntegerForID);
			// Si ppIntegerForID se usa fuera del bloque, ocurrir√° un error, ya que ya no existe en esta parte del c√≥digo.
		}
	}
}

La √∫ltima consideraci√≥n sobre la nomenclatura de variables se refiere a par√°metros pasados al c√≥digo por disparadores de eventos. Estas variables reciben la letra "e" cuando se declaran en eventos.

lsl

key gKeyChave;	

default
{
	state_entry()
	{
		llSay(0, "¬°Hola, avatar!");
	}

	touch_start(integer eIntegerTotal)
	{
		llSay(0, "¬°Tocado!");
		gKeyChave = llDetectedKey(0);
		
		integer pIntegerID;
		for(pIntegerID = 0; pIntegerID < eIntegerTotal; pIntegerID++)
		{
			integer ppIntegerForID = pIntegerID;
			llSay(0, "Fui tocado por " + llKey2Name(gKeyChave) + " y tiene ID = " + (string)ppIntegerForID);
		}
		
		// Las variables "e" solo existen durante la ejecuci√≥n del evento.
	}
}

Estas son las reglas que uso en la especificaci√≥n de nomenclatura de variables. Por supuesto, hay otras consideraciones que no caben aqu√≠, como usar solo 3 letras al declarar el tipo (por ejemplo, eIntTotal). Siempre se recomienda nombrar las variables en ingl√©s... ¬°es m√°s estiloso! üòÑ

Este es un resumen de mi especificaci√≥n de nomenclatura de variables. A medida que se actualice con m√°s informaci√≥n, ser√° publicada.

Un saludo,
Augustus
